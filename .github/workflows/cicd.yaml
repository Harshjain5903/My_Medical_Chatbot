name: Deploy Application Docker Image to EC2 instance

on:
  push:
    branches: [ main ]

jobs:
  Continuous-Integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  Continuous-Deployment:
    needs: Continuous-Integration
    runs-on: self-hosted
    steps:
      - name: Checkout (keep workspace clean)
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Run Docker Image to serve users
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
        run: |
          set -e
          IMAGE="$ECR_REGISTRY/$ECR_REPOSITORY:latest"
          CONTAINER="medicalbot-web"

          # pull the latest
          docker pull "$IMAGE"

          # stop & remove any previous container with this name
          if [ "$(docker ps -aq -f name=$CONTAINER)" ]; then
            docker rm -f "$CONTAINER" || true
          fi

          # free port 80 if some other container grabbed it
          OCCUPANT="$(docker ps --format '{{.ID}} {{.Names}} {{.Ports}}' | grep ':80->' | awk '{print $1}')"
          if [ -n "$OCCUPANT" ]; then docker rm -f "$OCCUPANT" || true; fi

          # run new container (maps 80 on host to 8080 in container)
          docker run -d --restart unless-stopped \
            --name "$CONTAINER" \
            -e PINECONE_API_KEY="${{ secrets.PINECONE_API_KEY }}" \
            -e GROQ_API_KEY="${{ secrets.GROQ_API_KEY }}" \
            -p 80:8080 \
            "$IMAGE"

          # show status
          sleep 2
          docker ps --filter "name=$CONTAINER"
